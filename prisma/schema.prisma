// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL") // Cukup gunakan satu variabel ini
}

// Model untuk Autentikasi (wajib untuk NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?   // For email/password login (hashed with argon2)
  accounts      Account[]
  sessions      Session[]
  roadmaps      Roadmap[] // Relasi ke Roadmap
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model untuk menyimpan data Roadmap kita
model Roadmap {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Menyimpan seluruh output AI sebagai JSON
  content   Json
  contentHash String?

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Publikasi
  published   Boolean   @default(false)
  slug        String?   @unique
  publishedAt DateTime?

  progress    RoadmapProgress?

  // Jika roadmap ini hasil fork dari roadmap lain, simpan id sumbernya
  sourceId   String?

  @@unique([userId, sourceId])
  @@index([userId, contentHash, title])
}

model RoadmapProgress {
  id             String   @id @default(cuid())
  roadmapId      String   @unique
  roadmap        Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  // Simpan daftar task yang sudah selesai dalam bentuk array indeks: { "m-<i>-t-<j>": true }
  completedTasks Json     @default("{}")
  percent        Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}